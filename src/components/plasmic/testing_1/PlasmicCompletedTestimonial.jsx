// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wLUabMsNeZ89NRgMWCB4bs
// Component: b9ZDSlbdF8CUX_
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_testing_1.module.css"; // plasmic-import: wLUabMsNeZ89NRgMWCB4bs/projectcss
import sty from "./PlasmicCompletedTestimonial.module.css"; // plasmic-import: b9ZDSlbdF8CUX_/css
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: BxE3xCxIj8AdcQ/icon
import image45DDc5Ix72J1WGog from "./images/image45.png"; // plasmic-import: dDc5IX72J1wGog/picture

export const PlasmicCompletedTestimonial__VariantProps = new Array();

export const PlasmicCompletedTestimonial__ArgProps = new Array();

function PlasmicCompletedTestimonial__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100px"}
        src={{
          src: image45DDc5Ix72J1WGog,
          fullWidth: 205,
          fullHeight: 208,
          aspectRatio: undefined
        }}
      />

      <Icon28Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__mnsCf)}>
        <div className={classNames(projectcss.all, sty.freeBox__frM3I)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uqKq
            )}
          >
            {"Truly revolutionary. An incredible leap forward."}
          </div>
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kp9JF)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wiGRj)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__og2K7
            )}
          >
            {"Jane Doe"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mTdSm
            )}
          >
            {"VP Marketing\nPied Piper"}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCompletedTestimonial__ArgProps,
          internalVariantPropNames: PlasmicCompletedTestimonial__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCompletedTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedTestimonial";
  } else {
    func.displayName = `PlasmicCompletedTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedTestimonial = Object.assign(
  // Top-level PlasmicCompletedTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicCompletedTestimonial
    internalVariantProps: PlasmicCompletedTestimonial__VariantProps,
    internalArgProps: PlasmicCompletedTestimonial__ArgProps
  }
);

export default PlasmicCompletedTestimonial;
/* prettier-ignore-end */
