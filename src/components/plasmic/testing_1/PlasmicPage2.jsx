// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wLUabMsNeZ89NRgMWCB4bs
// Component: 0BFmBvJPD6pyuK
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TryItHere from "../../TryItHere"; // plasmic-import: W-p8dV2RNsaBxh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_testing_1.module.css"; // plasmic-import: wLUabMsNeZ89NRgMWCB4bs/projectcss
import sty from "./PlasmicPage2.module.css"; // plasmic-import: 0BFmBvJPD6pyuK/css

export const PlasmicPage2__VariantProps = new Array();

export const PlasmicPage2__ArgProps = new Array();

function PlasmicPage2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <TryItHere
            data-plasmic-name={"tryItHere"}
            data-plasmic-override={overrides.tryItHere}
            className={classNames("__wab_instance", sty.tryItHere)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "tryItHere"],
  tryItHere: ["tryItHere"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPage2__ArgProps,
          internalVariantPropNames: PlasmicPage2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPage2";
  } else {
    func.displayName = `PlasmicPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicPage2 = Object.assign(
  // Top-level PlasmicPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tryItHere: makeNodeComponent("tryItHere"),
    // Metadata about props expected for PlasmicPage2
    internalVariantProps: PlasmicPage2__VariantProps,
    internalArgProps: PlasmicPage2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPage2;
/* prettier-ignore-end */
